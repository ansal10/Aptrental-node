{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Yet Another Node.js Blogg Application API",
    "description": "Yet Another Node.js Blogg Application API",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "localhost:3000",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Users",
      "description": "API for users in the system"
    },
    {
      "name": "House",
      "description": "API for the house in the system"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/user/signup": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Create new user in system",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User that we want to create",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "New user is created",
            "schema": {
              "$ref": "#/definitions/SuccessUserResponse"
            }
          },
          "40x" :{
            "description": "When user creation is failed",
              "schema":{
                "$ref": "#/definitions/ErrorResponse"
              }
          }

        }
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Login the user",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User that we want to login",
            "schema": {
              "properties":{
                "email":{
                  "type": "string",
                  "example": "manovagyanik1@gmail.com"
                },
                "password": {
                  "type": "string",
                  "example": "pass1234"
                }
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Logged in success full",
            "schema": {
              "$ref": "#/definitions/SuccessUserResponse"
            }
          },
          "40x" :{
            "description": "Logged in failed",
            "schema":{
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/user":{
      "get":{
        "tags": ["Users"],
        "description": "List of users",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "page number, by default 1"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of user with page size of 50",
            "schema": {
              "type": "object",
              "properties":{
                "message":{ "type": "string"},
                "data":{
                  "type": "array",
                  "$ref": "#/definitions/DetailedUser"
                }
              }
            }
          },
          "4xx" :{
            "description": "Fetching failed",
            "schema":{
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/user/{userId}": {
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "ID of user that we want to find",
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user with given ID",
        "responses": {
          "200": {
            "description": "User is found",
            "schema": {
              "properties":{
                "success":{
                  "type": "object",
                  "properties":{
                    "message":{ "type": "string"},
                    "data":{
                      "$ref": "#/definitions/DetailedUser"
                    }
                  }
                }
              }
            }
          },
          "4xx": {
            "description": "User is not found",
            "schema":{
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "summary": "Update user with give ID",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User with new values of properties",
            "schema": {
              "$ref": "#/definitions/DetailedUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is Updates",
            "schema": {
              "properties":{
                "success":{
                  "type": "object",
                  "properties":{
                    "message":{ "type": "string"},
                    "data":{
                      "$ref": "#/definitions/DetailedUser"
                    }
                  }
                }
              }
            }
          },
          "4xx": {
            "description": "error",
            "schema":{
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }


  },
  "definitions": {
    "DetailedUser":{
      "properties": {
        "id":{
          "type": "integer"
        },
        "email": {
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "type": "string"
        },
        "sex":{
          "type": "string",
          "enum": ["male", "female", "other"]
        },
        "role":{
          "type": "string",
          "enum": ["admin", "realtor", "consumer"]
        },
        "status":{
          "type": "string",
          "enum": ["active", "inactive"]
        },
        "createdAt":{
          "type":"string",
          "example": "ISO Format date"
        },
        "updatedAt":{
          "type":"string",
          "example": "ISO Format date"
        }
      }
    },
    "User": {
      "required": [
        "email",
        "password",
        "sex",
        "name"
      ],
      "properties": {
        "email": {
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "sex":{
          "type": "string",
          "enum": ["male", "female", "other"]
        }
      }
    },
    "Users": {
      "type": "array",
      "$ref": "#/definitions/User"
    },
    "SuccessResponse":{
      "type": "object",
      "properties":{
        "success":{
          "type": "string"
        }
      }
    },

    "SuccessUserResponse":{
      "type": "object",
      "properties":{
        "success":{
          "type": "object",
          "properties":{
            "message": {"type": "string"}
          }
        }
      }
    },
    "ErrorResponse":{
      "type": "object",
      "properties":{
        "error":{
          "type": "object",
          "properties":{
            "message": {"type": "string"}
          }
        }
      }
    }
  }
}