'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.middlewareFactory = middlewareFactory;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _globby = require('globby');

var _globby2 = _interopRequireDefault(_globby);

var urlSymbol = Symbol('url');
var methodSymbol = Symbol('method');
var isRouteSymbol = Symbol('isRoute');
var middlewaresSymbol = Symbol('middlewares');

exports['default'] = function callee$0$0(patterns, stategy) {
    for (var _len = arguments.length, params = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        params[_key - 2] = arguments[_key];
    }

    var stategyInstance, paths;
    return regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                stategyInstance = stategy.apply(undefined, params);
                context$1$0.next = 3;
                return regeneratorRuntime.awrap((0, _globby2['default'])(patterns));

            case 3:
                paths = context$1$0.sent;

                paths.map(require).forEach(function (obj) {
                    Object.keys(obj).map(function (name) {
                        return obj[name];
                    }).filter(function (x) {
                        return x[isRouteSymbol];
                    }).forEach(function (action) {
                        stategyInstance({
                            action: action,
                            url: action[urlSymbol],
                            method: action[methodSymbol],
                            middlewares: action[middlewaresSymbol] || []
                        });
                    });
                });

            case 5:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
};

var httpGet = decoratorFactory('get');
exports.httpGet = httpGet;
var httpPost = decoratorFactory('post');
exports.httpPost = httpPost;
var httpPut = decoratorFactory('put');
exports.httpPut = httpPut;
var httpDelete = decoratorFactory('delete');
exports.httpDelete = httpDelete;
var httpHead = decoratorFactory('head');

exports.httpHead = httpHead;

function middlewareFactory(middleware) {
    return function decorator() {
        var isCalledWithoutParams = arguments[2] !== undefined && 'value' in arguments[2];

        if (isCalledWithoutParams) {
            addMidleware(arguments[2], middleware);
        } else {
            middleware = middleware.apply(undefined, arguments);

            return function (target, name, descriptor) {
                addMidleware(descriptor, middleware);
            };
        }
    };
}

function addMidleware(descriptor, middleware) {
    if (!descriptor.value[middlewaresSymbol]) {
        descriptor.value[middlewaresSymbol] = [];
    }

    descriptor.value[middlewaresSymbol].push(middleware);
}

function decoratorFactory(method) {
    return function decorator(url) {
        return function (target, name, descriptor) {
            descriptor.value[isRouteSymbol] = true;
            descriptor.value[urlSymbol] = url;
            descriptor.value[methodSymbol] = method;
        };
    };
}